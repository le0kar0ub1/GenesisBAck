#!/bin/sh

### Environment ################################################################

TARGET=$1

SOURCE=$(dirname $(dirname $(realpath $0)))
printf "[\e[36;1mTOOL\e[0m] Toolchain Builder\n"
printf "[\e[34;1mINFO\e[0m] Building from $SOURCE...\n"
if [ -z "$PREFIX" ]; then
	export PREFIX="$SOURCE/mktoolchain/toolchain"
fi

export SCRIPT="$SOURCE/mktoolchain"

if [ -z "$TARGET" ]; then
	TARGET=$(lscpu | head -n 1 | cut -d ' ' -f 2- | xargs)
	printf "[\e[34;1mINFO\e[0m] TARGET unset, defaulting to %s\n" $TARGET
else
	printf "[\e[34;1mINFO\e[0m] TARGET set to %s\n" $TARGET
fi

export PATH="$PREFIX/bin:$PATH"

### Dependencies ###############################################################
source $SCRIPT/build-helpers

require make
require curl
require tar
require flex
require bison
require readline.so # hope it's a standard
# require rsync

### Exit Handler ###############################################################
cleanup() {
	if [ $? != 0 ]; then
		rm -rf $PREFIX
	fi
	rm -rf $WORKSPACE
}

set -e

trap cleanup EXIT

### Directories ################################################################
WORKSPACE=$(mktemp -td build-toolchain.XXXXXXXXX || exit 1)
cd $WORKSPACE

if [ -e "$PREFIX" ] && [ -v CLEAN_TOOLCHAIN ]; then
	printf "[\e[34;1mINFO\e[0m] Prefix already exists, recreating...\n"
	rm -rf $PREFIX || exit 1
fi

mkdir -p $PREFIX || exit 1

source $SOURCE/mktoolchain/gnu.sh
source $SOURCE/mktoolchain/external.sh

### We're done! #####################################################################
printf "[\e[34;1mINFO\e[0m] Toolchain built!\n"
